import numpy as np
import matplotlib.pyplot as plt

# Datos proporcionados
time = np.arange(1, 351)  # Tiempo desde 1 hasta 350
vc = np.array([0.0, 0.0, 0.21, 0.33, 0.57, 0.81, 0.92, 1.14, 1.36, 1.47, 1.68, 1.88, 1.98, 2.17, 2.36, 2.46, 2.64, 2.82, 2.9, 3.07, 3.24, 3.32, 3.48, 3.63, 3.71, 3.86, 4.0, 4.07, 4.21, 4.34, 4.41, 4.54, 4.67, 4.73, 4.85, 4.97, 5.03, 5.14, 5.25, 5.3, 5.41, 5.51, 5.56, 5.66, 5.75, 5.8, 5.98, 6.02, 6.11, 6.19, 6.23, 6.31, 6.39, 6.43, 6.5, 6.58, 6.61, 6.68, 6.75, 6.78, 6.85, 6.91, 6.94, 7.003, 7.06, 7.09, 7.15, 7.21, 7.23, 7.29, 7.34, 7.36, 7.41, 7.46, 7.49, 7.54, 7.58, 7.6, 7.65, 7.69, 7.71, 7.75, 7.8, 7.82, 7.86, 7.89, 7.91, 7.95, 7.98, 8.0, 8.04, 8.07, 8.09, 8.12, 8.15, 8.17, 8.2, 8.23, 8.24, 8.27, 8.3, 8.31, 8.34, 8.37, 8.38, 8.41, 8.43, 8.44, 8.47, 8.49, 8.5, 8.53, 8.55, 8.56, 8.58, 8.6, 8.61, 8.63, 8.65, 8.66, 8.68, 8.7, 8.71, 8.72, 8.74, 8.75, 8.77, 8.78, 8.79, 8.81, 8.82, 8.83, 8.84, 8.86, 8.87, 8.88, 8.89, 8.9, 8.92, 8.93, 8.93, 8.95, 8.96, 8.97, 8.98, 8.99, 8.99, 9.01, 9.02, 9.02, 9.03, 9.04, 9.05, 9.06, 9.07, 9.07, 9.08, 9.09, 9.09, 9.1, 9.11, 9.12, 9.13, 9.13, 9.14, 9.15, 9.15, 9.16, 9.16, 9.17, 9.18, 9.18, 9.19, 9.19, 9.2, 9.21, 9.21, 9.22, 9.22, 9.23, 9.23, 9.24, 9.24, 9.24, 9.25, 9.25, 9.26, 9.27, 9.27, 9.27, 9.28, 9.28, 9.29, 9.29, 9.29, 9.3, 9.3, 9.3, 9.302, 9.244, 9.123, 8.89, 8.665, 8.556, 8.342, 8.134, 8.034, 7.835, 7.64, 7.546, 7.36, 7.179, 7.092, 6.917, 6.748, 6.665, 6.502, 6.344, 6.266, 6.113, 5.964, 5.892, 5.747, 5.607, 5.539, 5.405, 5.274, 5.209, 5.083, 4.96, 4.899, 4.78, 4.665, 4.608, 4.496, 4.388, 4.335, 4.229, 4.128, 4.078, 3.979, 3.883, 3.835, 3.743, 3.653, 3.608, 3.522, 3.436, 3.394, 3.314, 3.233, 3.195, 3.117, 3.043, 3.005, 2.934, 2.862, 2.828, 2.76, 2.694, 2.662, 2.599, 2.535, 2.506, 2.445, 2.388, 2.358, 2.302, 2.247, 2.22, 2.168, 2.115, 2.089, 2.041, 1.991, 1.968, 1.921, 1.875, 1.854, 1.809, 1.766, 1.745, 1.703, 1.664, 1.643, 1.604, 1.565, 1.547, 1.511, 1.476, 1.457, 1.424, 1.389, 1.374, 1.341, 1.31, 1.294, 1.264, 1.234, 1.219, 1.191, 1.162, 1.149, 1.123, 1.096, 1.083, 1.058, 1.033, 1.022, 0.997, 0.974, 0.962, 0.941, 0.919, 0.907, 0.886, 0.865, 0.856, 0.836, 0.817, 0.807, 0.788, 0.77, 0.761, 0.744, 0.727, 0.718, 0.702, 0.686, 0.679, 0.663, 0.646, 0.64, 0.625, 0.611, 0.604, 0.591, 0.577, 0.569, 0.557, 0.545, 0.539, 0.526, 0.515, 0.509, 0.497, 0.486, 0.48, 0.47, 0.459])

# Definir la señal vs como un pulso cuadrado
vs = np.zeros_like(time, dtype=float)
vs[16:194] = 10  # Índices en Python comienzan desde 0, ajustamos para reflejar "17-194"

# Definimos la función Fourier proporcionada
def Fourier(v, t, f):
    suma = 0
    N = len (t)
    for j, k in enumerate(t):
        if j != 0 and j != len(t) - 1:
            IncrementoT = (t[j + 1] - t[j - 1]) / 2
            suma += v[j] * IncrementoT * np.exp(-1.0j * k * 2 * np.pi * f)
    print(suma)
    return suma/N

# Paso temporal (delta t = 1 segundo)
dt = 1

# Frecuencias para el análisis de Fourier
frequencies = np.linspace(0, 1 / (2 * dt), len(time) // 2)
Ganancia = []
j=0
# Calcular las transformadas de Fourier para vc y vs
magnitude_vc = [np.abs(Fourier(vc, time, f)) for f in frequencies]
magnitude_vs = [np.abs(Fourier(vs, time, f)) for f in frequencies]
for i in magnitude_vs:
    Ganancia.append(20*np.log10(magnitude_vc[j]/i))
    j+=1
# Graficar los resultados
plt.figure(figsize=(12, 6))
plt.plot(frequencies,Ganancia, label="$|F(v_c)|$", color='blue')
#plt.plot(frequencies, magnitude_vs, label="$|F(v_s)|$", color='orange')
plt.title("Transformada de Fourier Discreta de $v_c$ y $v_s$")
plt.xlabel("Frecuencia (Hz)")
plt.ylabel("Magnitud")
plt.legend()
plt.grid()
plt.show()
